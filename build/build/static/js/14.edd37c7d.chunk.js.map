{"version":3,"sources":["routes/BarberDetails/index.js"],"names":["TabPane","Tabs","BarberDetails","props","state","barber_data","portfolio","certificate","schedule","services","resume","reviews","isLoading","barber_id","this","match","params","setState","requestOptions","method","headers","body","JSON","stringify","fetch","api_base_url","then","response","json","barber_details","catch","antIcon","style","fontSize","spin","span","className","indicator","defaultActiveKey","type","size","tab","key","PreviewGroup","width","src","profile_picture","id","full_name","age","length","map","data","picture","gutter","title","day","bordered","start_time","end_time","break_start_time","break_end_time","service_name","price","time_duration","href","download","marginLeft","disabled","defaultValue","no_of_star","comments","React","Component"],"mappings":"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","file":"static/js/14.edd37c7d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Row, Spin, Tabs, Image, Card, Rate } from \"antd\";\nimport { LoadingOutlined, DownloadOutlined } from '@ant-design/icons';\n\nimport { api_base_url, method, headers } from '../../util/config'\n\nconst { TabPane } = Tabs;\n\nclass BarberDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            barber_data: '',\n            portfolio: [],\n            certificate: [],\n            schedule: [],\n            services: [],\n            resume: [],\n            reviews: [],\n            isLoading: false,\n            barber_id: ''\n        };\n    }\n\n    componentDidMount() {\n        let barber_id = this.props.match.params.barber_id;\n        this.setState({ barber_id: barber_id })\n\n        const requestOptions = {\n            method,\n            headers,\n            body: JSON.stringify({ barber_id: barber_id })\n        }\n\n        fetch(api_base_url + \"barberProfileDetail\", requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                this.setState({\n                    barber_data: response.barber_details,\n                    portfolio: response.barber_details.portfolio,\n                    certificate: response.barber_details.certificate,\n                    schedule: response.barber_details.schedule,\n                    services: response.barber_details.services,\n                    resume: response.barber_details.resume,\n                    reviews: response.barber_details.reviews,\n                    isLoading: false\n                })\n            })\n            .catch();\n    }\n\n    render() {\n        const { isLoading, barber_data, portfolio, certificate, schedule, services, resume, reviews } = this.state;\n        const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\n\n        return (\n            <div>\n                <Row>\n                    <Col span={24}>\n                        <h2 className=\"title gx-mb-4\">Barber Details</h2>\n                    </Col>\n\n                    {isLoading ?\n                        <Col span={24}>\n                            <Spin indicator={antIcon} />\n                        </Col>\n                        :\n                        <Col span={24}>\n                            <Tabs defaultActiveKey=\"1\" type=\"card\" size={\"large\"}>\n                                {/* Barber Profile */}\n                                <TabPane tab=\"Profile\" key=\"1\">\n                                    <div className=\"gx-profile-banner-top\">\n                                        <div className=\"gx-profile-banner-top-left\">\n                                            <div className=\"gx-profile-banner-avatar\">\n                                                <Image.PreviewGroup>\n                                                    <Image width={400} src={barber_data.profile_picture} />\n                                                </Image.PreviewGroup>\n                                            </div>\n                                            <div className=\"gx-profile-banner-avatar-info\">\n                                                <h2 className=\"gx-mb-2 gx-mb-sm-3 gx-font-weight-light\">ID : {barber_data.id}</h2>\n                                                <h2 className=\"gx-mb-2 gx-mb-sm-3 gx-font-weight-light\">Name : {barber_data.full_name}</h2>\n                                                <p className=\"gx-mb-0 gx-fs-lg\">Age : {barber_data.age}</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </TabPane>\n\n                                {/* Barber Portfolio */}\n                                <TabPane tab=\"Portfolio\" key=\"2\">\n                                    {\n                                        portfolio.length > 0 ?\n                                            <Image.PreviewGroup>\n                                                {portfolio.map(data => (\n                                                    <Image width={200} src={data.picture}\n                                                    />\n                                                ))}\n                                            </Image.PreviewGroup>\n                                            :\n                                            <h2 className=\"gx-mb-2 gx-mb-sm-3 gx-fs-xxl gx-font-weight-light\">No Record Found</h2>\n                                    }\n                                </TabPane>\n\n                                {/* Barber Certificate */}\n                                <TabPane tab=\"Certificate\" key=\"3\">\n                                    {\n                                        certificate.length > 0 ?\n                                            <Image.PreviewGroup>\n                                                {certificate.map(data => (\n                                                    <Image width={200} src={data.picture}\n                                                    />\n                                                ))}\n                                            </Image.PreviewGroup>\n                                            :\n                                            <h2 className=\"gx-mb-2 gx-mb-sm-3 gx-fs-xxl gx-font-weight-light\">No Record Found</h2>\n                                    }\n                                </TabPane>\n\n                                {/* Barber Working Days */}\n                                <TabPane tab=\"Working Days\" key=\"4\">\n                                    {\n                                        schedule.length > 0 ?\n                                            <div className=\"site-card-wrapper\">\n                                                <Row gutter={16}>\n                                                    {schedule.map(data => (\n                                                        <Col span={5}>\n                                                            <Card title={data.day} bordered={false} style={{ width: 300 }}>\n                                                                <p>Day Start Time : {data.start_time}</p>\n                                                                <p>Day End Time : {data.end_time}</p>\n                                                                <p>Break Time Start : {data.break_start_time}</p>\n                                                                <p>Break Time End : {data.break_end_time}</p>\n                                                            </Card>\n                                                        </Col>\n                                                    ))}\n                                                </Row>\n                                            </div>\n                                            :\n                                            <h2 className=\"gx-mb-2 gx-mb-sm-3 gx-fs-xxl gx-font-weight-light\">No Record Found</h2>\n                                    }\n                                </TabPane>\n\n                                {/* Barber Services */}\n                                <TabPane tab=\"Services\" key=\"5\">\n                                    {\n                                        services.length > 0 ?\n                                            <div className=\"site-card-wrapper\">\n                                                <Row gutter={20}>\n                                                    {services.map(data => (\n                                                        <Col span={5}>\n                                                            <Card title={data.service_name} bordered={false} style={{ width: 300 }}>\n                                                                <p>Price : {data.price}</p>\n                                                                <p>Time Duration : {data.time_duration}</p>\n                                                            </Card>\n                                                        </Col>\n                                                    ))}\n                                                </Row>\n                                            </div>\n                                            :\n                                            <h2 className=\"gx-mb-2 gx-mb-sm-3 gx-fs-xxl gx-font-weight-light\">No Record Found</h2>\n                                    }\n                                </TabPane>\n\n                                {/* Barber Resume */}\n                                <TabPane tab=\"Resume\" key=\"6\">\n                                    {\n                                        resume.length > 0 ?\n                                            <>\n                                                {resume.map(data => (\n                                                    <a href={data.picture} download>\n                                                        <DownloadOutlined style={{ fontSize: 50, marginLeft: '1%' }} />\n                                                    </a>\n                                                ))}\n                                            </>\n                                            :\n                                            <h2 className=\"gx-mb-2 gx-mb-sm-3 gx-fs-xxl gx-font-weight-light\">No Record Found</h2>\n                                    }\n                                </TabPane>\n\n                                {/* Barber Reviews & Rating */}\n                                <TabPane tab=\"Reviews & Rating\" key=\"7\">\n                                    {\n                                        reviews.length > 0 ?\n                                            <div className=\"site-card-wrapper\">\n                                                <Row gutter={20}>\n                                                    {reviews.map(data => (\n                                                        <Col span={5}>\n                                                            <Card title={data.service_name} bordered={false} style={{ width: 300 }}>\n                                                                <p><Rate disabled defaultValue={data.no_of_star} /></p>\n                                                                <p>Comments : {data.comments}</p>\n                                                            </Card>\n                                                        </Col>\n                                                    ))}\n                                                </Row>\n                                            </div>\n                                            :\n                                            <h2 className=\"gx-mb-2 gx-mb-sm-3 gx-fs-xxl gx-font-weight-light\">No Record Found</h2>\n                                    }\n                                </TabPane>\n                            </Tabs>\n                        </Col>\n                    }\n                </Row>\n            </div>\n        );\n    }\n};\n\nexport default BarberDetails;\n"],"sourceRoot":""}